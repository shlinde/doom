#+title: GNU Emacs Configuration - Doom Edition
#+author: Sebastian Hempel Linde
#+created: <2025-04-22 Tue>

* System Configuration

** Keyboard Layout and Repeat Rate

#+begin_src sh
xset r rate 250 60
#+end_src

#+RESULTS:

* General Configuration
#+begin_src emacs-lisp :tangel "config.el"
;;; config.el --- Doom Configuration -*- lexical-binding: t; -*-
#+end_src
** Personal Information

#+begin_src emacs-lisp :tangle "config.el"
;;; Personal Information
(setq user-full-name "Sebastian Hempel Linde"
      user-mail-address "sebastian@hempellinde.com")
#+end_src

** Visuals

Use the Modus themes from Protesilaos as they just give the best readability and are consistent.

#+begin_src emacs-lisp :tangle "config.el"
;;;; Theme
(setq doom-theme 'modus-vivendi-deuteranopia
      doom-font (font-spec :family "RobotoMono Nerd Font" :size 13 :weight 'semi-bold)
      doom-variable-pitch-font (font-spec :family "RobotoMono Nerd Font" :size 13)
      display-line-numbers-type nil)
#+end_src

I like to be able to see the amount of battery left and the time in the modeline.

#+begin_src emacs-lisp :tangle "config.el"
(setq display-time-day-and-date t
      display-time-24hr-format t)

(display-time-mode 1)

(require 'battery)
(if (and battery-status-function
         (not (equal (alist-get ?L (funcall battery-status-function))
                     "N/A")))
    (prin1-to-string `(display-battery-mode 1))
  "")
#+end_src

** Defaults

Modified defaults.
#+begin_src emacs-lisp :tangle "config.el"
(setq-default delete-by-moving-to-trash t  ; Delete files to trash
              window-combination-resize t  ; Take new window space from all other windows not just current
              x-stretch-cursor t)          ; Stretch cursor to the glyph width


(setq undo-limit (* 1024 1000 80)          ; 80 Mb undo limit
      evil-want-fine-undo t                ; Be more granular about undos
      auto-save-default t                  ; Turn on autosave
      password-cache-expiry nil            ; Don't make passwords entered expire
      scroll-margin 10)                    ; Always preserve 10 lines.

(global-subword-mode 1)                    ; Iterate through CamelCase words.
(global-set-key [remap dabbrev-expand]
                #'hippie-expand)           ; Replace dabbrev with hippie
#+end_src


** Keybindings

#+begin_src emacs-lisp :tangle "config.el"
(map! "M-," #'embark-act)
#+end_src

** Doom Configuration
*** Modules

#+begin_src emacs-lisp :tangle "init.el"
;;; init.el -*- lexical-binding: t; -*-

(doom! :input
       :completion
       (corfu +orderless +dabbrev +icons)
       (vertico +icons)

       :ui
       doom
       hl-todo
       modeline
       ophints
       (popup +defaults)
       (vc-gutter +pretty)

       :editor
       (evil +everywhere)
       fold
       (format +onsave)
       snippets

       :emacs
       dired
       electric
       undo
       vc

       :term
       eshell
       vterm

       :checkers
       (syntax +icons +childframe)

       :tools
       (eval +overlay)
       (lookup +docsets)
       (lsp +peek)
       magit
       pdf
       tree-sitter


       :lang
       emacs-lisp
       (python +lsp +tree-sitter +pyright)
       (org +pretty)

       :email

       :app
       calendar

       :config
       ;; literate
       (default +bindings +smartparens))
#+end_src


* Packages

** Disabled

#+begin_src emacs-lisp :tangle "packages.el"
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

(package! doom-themes :disable t)
#+end_src

** Visuals

#+begin_src emacs-lisp :tangle "packages.el"
#+end_src

** Tools

*** GPTel

#+begin_src emacs-lisp :tangle "packages.el"
(package! gptel)
#+end_src

#+begin_src emacs-lisp :tangle "config.el"
(use-package! gptel
  :commands gptel gptel-menu gptel-mode gptel-send
  :config
  (gptel-make-gemini "Gemini" :key (getenv "GEMINI_API_KEY") :stream t)
  (setq
   gptel-model 'gemini-2.0-flash-thinking-exp-01-21
   gptel-backend (gptel-make-gemini "Gemini"
                   :key (getenv "GEMINI_API_KEY")
                   :stream t))
  (setq gptel-default-mode #'org-mode))
#+end_src


* Applications
* Language Configuration

** Python

*** LSP

#+begin_src emacs-lisp :tangle "config.el"
(use-package! lsp-pyright
  :config (setopt lsp-pyright-langserver-command "basedpyright"))
#+end_src

** Org Mode

**** General Setup

#+begin_src emacs-lisp :tangle "config.el"
(setq org-directory "~/data/org/")
#+end_src
